{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"charts-container\"\n};\nconst _hoisted_2 = {\n  class: \"chart-container\"\n};\nconst _hoisted_3 = {\n  class: \"chart-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  const _component_Line = _resolveComponent(\"Line\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Close Price Bar Chart \"), _createElementVNode(\"div\", _hoisted_2, [$setup.closeChartData ? (_openBlock(), _createBlock(_component_Bar, {\n    key: 0,\n    data: $setup.closeChartData,\n    options: $setup.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" High Price Line Chart \"), _createElementVNode(\"div\", _hoisted_3, [$setup.highChartData ? (_openBlock(), _createBlock(_component_Line, {\n    key: 0,\n    data: $setup.highChartData,\n    options: $setup.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","$setup","closeChartData","_createBlock","_component_Bar","key","data","options","chartOptions","_hoisted_3","highChartData","_component_Line"],"sources":["/Users/attiqrehman/Documents/StockInfoSystem_FrontEnd/frontend/src/components/StockIntradayChart.vue"],"sourcesContent":["<template>\n    <div class=\"charts-container\">\n      <!-- Close Price Bar Chart -->\n      <div class=\"chart-container\">\n        <Bar v-if=\"closeChartData\" :data=\"closeChartData\" :options=\"chartOptions\" />\n      </div>\n  \n      <!-- High Price Line Chart -->\n      <div class=\"chart-container\">\n        <Line v-if=\"highChartData\" :data=\"highChartData\" :options=\"chartOptions\" />\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { ref, onMounted, watch } from \"vue\";\n  import axios from \"axios\";\n  import { Bar, Line } from \"vue-chartjs\";\n  import { Chart as ChartJS, Title, Tooltip, Legend, BarElement, LineElement, CategoryScale, LinearScale } from \"chart.js\";\n  \n  ChartJS.register(Title, Tooltip, Legend, BarElement, LineElement, CategoryScale, LinearScale);\n  \n  export default {\n    components: { Bar, Line },\n    props: {\n      symbol: String, \n    },\n    setup(props) {\n      const closeChartData = ref(null);\n      const highChartData = ref(null);\n  \n      async function fetchIntradayData() {\n        try {\n          const response = await axios.get(`http://localhost:3000/stocks/intraday?symbol=${props.symbol}&interval=60min`);\n  \n          // Format the data for Close price (Bar chart)\n          closeChartData.value = {\n            labels: response.data.map(item => item.timestamp), // X-axis labels (timestamps)\n            datasets: [\n              {\n                label: \"Stock Close (60min Interval)\",\n                data: response.data.map(item => parseFloat(item.close)), // Close price\n                backgroundColor: \"rgba(0,123,255,0.6)\", // Bar color\n              },\n            ],\n          };\n  \n          // Format the data for High price (Line chart)\n          highChartData.value = {\n            labels: response.data.map(item => item.timestamp), // X-axis labels (timestamps)\n            datasets: [\n              {\n                label: \"Stock High (60min Interval)\",\n                data: response.data.map(item => parseFloat(item.high)), // High price\n                borderColor: \"rgba(255,99,132,1)\", // Line color\n                backgroundColor: \"rgba(255,99,132,0.2)\", // Transparent line fill\n                fill: true, // Fill under the line\n              },\n            ],\n          };\n  \n        } catch (error) {\n          console.error(\"Error fetching intraday data:\", error);\n        }\n      }\n  \n      // Watch for symbol changes and fetch new data\n      watch(() => props.symbol, (newSymbol) => {\n        fetchIntradayData();\n      });\n  \n      // Fetch data on component mount\n      onMounted(fetchIntradayData);\n  \n      return {\n        closeChartData,\n        highChartData,\n        chartOptions: {\n          responsive: true,\n          maintainAspectRatio: true,\n        },\n      };\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .charts-container {\n    display: flex;\n    flex-direction: column;\n    gap: 20px; /* Adds space between the charts */\n  }\n  \n  .chart-container {\n    width: 100%;\n    max-width: 1000px;\n    margin: auto;\n  }\n  </style>\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAkB;;EAEtBA,KAAK,EAAC;AAAiB;;EAKvBA,KAAK,EAAC;AAAiB;;;;uBAP9BC,mBAAA,CAUM,OAVNC,UAUM,GATJC,mBAAA,2BAA8B,EAC9BC,mBAAA,CAEM,OAFNC,UAEM,GADOC,MAAA,CAAAC,cAAc,I,cAAzBC,YAAA,CAA4EC,cAAA;IAJpFC,GAAA;IAIoCC,IAAI,EAAEL,MAAA,CAAAC,cAAc;IAAGK,OAAO,EAAEN,MAAA,CAAAO;kDAJpEV,mBAAA,e,GAOMA,mBAAA,2BAA8B,EAC9BC,mBAAA,CAEM,OAFNU,UAEM,GADQR,MAAA,CAAAS,aAAa,I,cAAzBP,YAAA,CAA2EQ,eAAA;IATnFN,GAAA;IASoCC,IAAI,EAAEL,MAAA,CAAAS,aAAa;IAAGH,OAAO,EAAEN,MAAA,CAAAO;kDATnEV,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}