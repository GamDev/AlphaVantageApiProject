{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted, watch } from \"vue\";\nimport axios from \"axios\";\nimport { Bar } from \"vue-chartjs\";\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from \"chart.js\";\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nexport default {\n  components: {\n    Bar\n  },\n  props: {\n    symbol: String\n  },\n  setup(props) {\n    const chartData = ref(null);\n    async function fetchIntradayData() {\n      try {\n        const response = await axios.get(`http://localhost:3000/stocks/intraday?symbol=${props.symbol}&interval=60min`);\n\n        // Format the data for the chart\n        const formattedData = {\n          labels: response.data.map(item => item.timestamp),\n          // X-axis labels (timestamps)\n          datasets: [{\n            label: \"Stock Close (60min Interval)\",\n            // Bar chart for Close\n            data: response.data.map(item => parseFloat(item.close)),\n            // Close price\n            backgroundColor: \"rgba(0,123,255,0.6)\",\n            // Bar color\n            yAxisID: 'y1' // Assign this to the left y-axis (Bar chart)\n          }, {\n            label: \"Stock High (60min Interval)\",\n            // Line chart for High\n            data: response.data.map(item => parseFloat(item.high)),\n            // High price\n            borderColor: \"rgba(255,99,132,1)\",\n            // Line color\n            backgroundColor: \"rgba(255,99,132,0.2)\",\n            // Line chart background color (transparent)\n            fill: true,\n            yAxisID: 'y2' // Assign this to the right y-axis (Line chart)\n          }]\n        };\n        chartData.value = formattedData;\n      } catch (error) {\n        console.error(\"Error fetching intraday data:\", error);\n      }\n    }\n    watch(() => props.symbol, newSymbol => {\n      fetchIntradayData();\n    });\n    onMounted(fetchIntradayData);\n    return {\n      chartData,\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: true,\n        scales: {\n          y1: {\n            type: 'linear',\n            position: 'left' // This is the y-axis for the bar chart (close)\n          },\n          y2: {\n            type: 'linear',\n            position: 'right',\n            // This is the y-axis for the line chart (high)\n            grid: {\n              drawOnChartArea: false // Don't draw grid lines for the line chart y-axis\n            }\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","axios","Bar","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","register","components","props","symbol","String","setup","chartData","fetchIntradayData","response","get","formattedData","labels","data","map","item","timestamp","datasets","label","parseFloat","close","backgroundColor","yAxisID","high","borderColor","fill","value","error","console","newSymbol","chartOptions","responsive","maintainAspectRatio","scales","y1","type","position","y2","grid","drawOnChartArea"],"sources":["/Users/attiqrehman/Documents/StockInfoSystem_FrontEnd/frontend/src/components/StockIntradayChart.vue"],"sourcesContent":["<template>\n    <div class=\"chart-container\">\n      <Bar v-if=\"chartData\" :data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n  </template>\n  \n  <script>\n  import { ref, onMounted, watch } from \"vue\";\n  import axios from \"axios\";\n  import { Bar } from \"vue-chartjs\";\n  import { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from \"chart.js\";\n  \n  ChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\n  \n  export default {\n    components: { Bar },\n    props: {\n      symbol: String, \n    },\n    setup(props) {\n      const chartData = ref(null);\n  \n      \n      async function fetchIntradayData() {\n      try {\n        const response = await axios.get(`http://localhost:3000/stocks/intraday?symbol=${props.symbol}&interval=60min`);\n        \n        // Format the data for the chart\n        const formattedData = {\n          labels: response.data.map(item => item.timestamp), // X-axis labels (timestamps)\n          datasets: [\n            {\n              label: \"Stock Close (60min Interval)\", // Bar chart for Close\n              data: response.data.map(item => parseFloat(item.close)), // Close price\n              backgroundColor: \"rgba(0,123,255,0.6)\", // Bar color\n              yAxisID: 'y1', // Assign this to the left y-axis (Bar chart)\n            },\n            {\n              label: \"Stock High (60min Interval)\", // Line chart for High\n              data: response.data.map(item => parseFloat(item.high)), // High price\n              borderColor: \"rgba(255,99,132,1)\", // Line color\n              backgroundColor: \"rgba(255,99,132,0.2)\", // Line chart background color (transparent)\n              fill: true,\n              yAxisID: 'y2', // Assign this to the right y-axis (Line chart)\n            },\n          ],\n        };\n\n        chartData.value = formattedData;\n      } catch (error) {\n        console.error(\"Error fetching intraday data:\", error);\n      }\n    }\n  \n   \n      watch(() => props.symbol, (newSymbol) => {\n        fetchIntradayData();\n      });\n  \n   \n      onMounted(fetchIntradayData);\n  \n          return {\n      chartData,\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: true,\n        scales: {\n          y1: {\n            type: 'linear',\n            position: 'left', // This is the y-axis for the bar chart (close)\n          },\n          y2: {\n            type: 'linear',\n            position: 'right', // This is the y-axis for the line chart (high)\n            grid: {\n              drawOnChartArea: false, // Don't draw grid lines for the line chart y-axis\n            },\n          },\n        },\n      },\n    };\n  },\n};\n</script>\n  \n  <style scoped>\n  .chart-container {\n    width: 100%;\n    max-width: 1000px;\n    margin: auto;\n  }\n  </style>\n  "],"mappings":";;AAOE,SAASA,GAAG,EAAEC,SAAS,EAAEC,KAAI,QAAS,KAAK;AAC3C,OAAOC,KAAI,MAAO,OAAO;AACzB,SAASC,GAAE,QAAS,aAAa;AACjC,SAASC,KAAI,IAAKC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAEC,WAAU,QAAS,UAAU;AAE3GN,OAAO,CAACO,QAAQ,CAACN,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAEC,WAAW,CAAC;AAEhF,eAAe;EACbE,UAAU,EAAE;IAAEV;EAAI,CAAC;EACnBW,KAAK,EAAE;IACLC,MAAM,EAAEC;EACV,CAAC;EACDC,KAAKA,CAACH,KAAK,EAAE;IACX,MAAMI,SAAQ,GAAInB,GAAG,CAAC,IAAI,CAAC;IAG3B,eAAeoB,iBAAiBA,CAAA,EAAG;MACnC,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMlB,KAAK,CAACmB,GAAG,CAAC,gDAAgDP,KAAK,CAACC,MAAM,iBAAiB,CAAC;;QAE/G;QACA,MAAMO,aAAY,GAAI;UACpBC,MAAM,EAAEH,QAAQ,CAACI,IAAI,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,SAAS,CAAC;UAAE;UACnDC,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,8BAA8B;YAAE;YACvCL,IAAI,EAAEJ,QAAQ,CAACI,IAAI,CAACC,GAAG,CAACC,IAAG,IAAKI,UAAU,CAACJ,IAAI,CAACK,KAAK,CAAC,CAAC;YAAE;YACzDC,eAAe,EAAE,qBAAqB;YAAE;YACxCC,OAAO,EAAE,IAAI,CAAE;UACjB,CAAC,EACD;YACEJ,KAAK,EAAE,6BAA6B;YAAE;YACtCL,IAAI,EAAEJ,QAAQ,CAACI,IAAI,CAACC,GAAG,CAACC,IAAG,IAAKI,UAAU,CAACJ,IAAI,CAACQ,IAAI,CAAC,CAAC;YAAE;YACxDC,WAAW,EAAE,oBAAoB;YAAE;YACnCH,eAAe,EAAE,sBAAsB;YAAE;YACzCI,IAAI,EAAE,IAAI;YACVH,OAAO,EAAE,IAAI,CAAE;UACjB,CAAC;QAEL,CAAC;QAEDf,SAAS,CAACmB,KAAI,GAAIf,aAAa;MACjC,EAAE,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF;IAGErC,KAAK,CAAC,MAAMa,KAAK,CAACC,MAAM,EAAGyB,SAAS,IAAK;MACvCrB,iBAAiB,CAAC,CAAC;IACrB,CAAC,CAAC;IAGFnB,SAAS,CAACmB,iBAAiB,CAAC;IAExB,OAAO;MACXD,SAAS;MACTuB,YAAY,EAAE;QACZC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE,IAAI;QACzBC,MAAM,EAAE;UACNC,EAAE,EAAE;YACFC,IAAI,EAAE,QAAQ;YACdC,QAAQ,EAAE,MAAM,CAAE;UACpB,CAAC;UACDC,EAAE,EAAE;YACFF,IAAI,EAAE,QAAQ;YACdC,QAAQ,EAAE,OAAO;YAAE;YACnBE,IAAI,EAAE;cACJC,eAAe,EAAE,KAAK,CAAE;YAC1B;UACF;QACF;MACF;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}