{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from \"axios\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { useRouter } from 'vue-router';\nexport default {\n  setup() {\n    const etfSymbol = \"QQQ\"; // Default ETF symbol (no user input)\n    const holdings = ref([]);\n    const currentPage = ref(1);\n    const itemsPerPage = 10; // Show 10 per page\n    const router = useRouter();\n    // Fetch ETF Holdings\n    const fetchHoldings = async () => {\n      try {\n        console.log(\"Fetching data from API...\");\n        const response = await axios.get(`http://localhost:3000/stocks/etf-holdings?symbol=${etfSymbol}`);\n        console.log(\"API Response:\", response.data);\n\n        // Initialize holdings with API data and favorite status from localStorage\n        holdings.value = response.data.map(holding => ({\n          ...holding,\n          isFavorite: getFavoriteFromStorage(holding.symbol) // Check localStorage for favorites\n        }));\n        currentPage.value = 1; // Reset to first page\n      } catch (error) {\n        console.error(\"Error fetching holdings:\", error);\n      }\n    };\n\n    // Fetch data automatically when component loads\n    onMounted(fetchHoldings);\n\n    // Pagination Computed Properties\n    const totalPages = computed(() => Math.ceil(holdings.value.length / itemsPerPage));\n    console.log(totalPages.value);\n    const paginatedHoldings = computed(() => {\n      // First, sort the holdings by isFavorite (favorites first)\n      const sortedHoldings = [...holdings.value].sort((a, b) => b.isFavorite - a.isFavorite);\n\n      // Then, apply pagination to the sorted holdings\n      const start = (currentPage.value - 1) * itemsPerPage;\n      return sortedHoldings.slice(start, start + itemsPerPage);\n    });\n\n    // Pagination Methods\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++;\n      }\n    };\n    const prevPage = () => {\n      if (currentPage.value > 1) {\n        currentPage.value--;\n      }\n    };\n\n    // View Stock Details (Route to Another Page)\n    const viewStockDetails = symbol => {\n      router.push(`/stock/${symbol}`);\n    };\n    const getChangeClass = weight => {\n      return parseFloat(weight) >= 0.05 ? \"text-success\" : \"text-danger\";\n    };\n    const getFavoriteFromStorage = symbol => {\n      const favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      return favorites.includes(symbol);\n    };\n\n    // Update localStorage with current favorites\n    const updateFavoritesInStorage = () => {\n      const favorites = holdings.value.filter(stock => stock.isFavorite).map(stock => stock.symbol);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n    };\n    const favoriteStocks = computed(() => {\n      return holdings.value.filter(stock => stock.isFavorite);\n    });\n    const toggleFavorite = symbol => {\n      const holding = holdings.value.find(stock => stock.symbol === symbol);\n      if (holding) {\n        holding.isFavorite = !holding.isFavorite; // Toggle the favorite status\n        updateFavoritesInStorage(); // Update localStorage\n      }\n    };\n    return {\n      holdings,\n      paginatedHoldings,\n      currentPage,\n      totalPages,\n      nextPage,\n      prevPage,\n      viewStockDetails,\n      getChangeClass,\n      toggleFavorite,\n      favoriteStocks\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","computed","onMounted","useRouter","setup","etfSymbol","holdings","currentPage","itemsPerPage","router","fetchHoldings","console","log","response","get","data","value","map","holding","isFavorite","getFavoriteFromStorage","symbol","error","totalPages","Math","ceil","length","paginatedHoldings","sortedHoldings","sort","a","b","start","slice","nextPage","prevPage","viewStockDetails","push","getChangeClass","weight","parseFloat","favorites","JSON","parse","localStorage","getItem","includes","updateFavoritesInStorage","filter","stock","setItem","stringify","favoriteStocks","toggleFavorite","find"],"sources":["/Users/attiqrehman/Documents/StockInfoSystem_FrontEnd/frontend/src/components/StockDashboard.vue"],"sourcesContent":["<template>\n  <div :class=\"themeClass\">\n    <h2 class=\"text-center mb-10\">Stock Dashboard</h2>\n\n    <!-- Stock Table -->\n    <div class=\"table-responsive\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>Symbol</th>\n            <th>Description</th>\n            <th>Weight (%)</th>\n            <th>Action</th>\n            <th>Favorite</th>\n          </tr>\n        </thead>\n        <tbody>\n            <tr v-for=\"holding in paginatedHoldings\" :key=\"holding.symbol\">\n            <td>{{ holding.symbol }}</td>\n            <td>{{ holding.description }}</td>\n            <td>{{ parseFloat(holding.weight).toFixed(2) }}%</td>\n           \n           <td>\n            <button @click=\"viewStockDetails(holding.symbol)\" class=\"btn btn-primary\">\n              View Details\n            </button>\n            </td>\n            <td>\n                    <button @click=\"toggleFavorite(holding.symbol)\" \n                      :class=\"{'btn-success': holding.isFavorite, 'btn-secondary': !holding.isFavorite}\" \n                      class=\"btn\">\n                        {{ holding.isFavorite ? 'Unmark Favorite' : 'Mark Favorite' }}\n                   </button>\n             </td>\n  </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <!-- Pagination Controls -->\n    <div class=\"pagination\">\n      <button @click=\"prevPage\" :disabled=\"currentPage === 1\" class=\"btn btn-secondary\">Previous</button>\n      <span>Page {{ currentPage }} of {{ totalPages }}</span>\n      <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\" class=\"btn btn-secondary\">Next</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { useRouter } from 'vue-router';\nexport default {\n  setup() {\n    const etfSymbol = \"QQQ\"; // Default ETF symbol (no user input)\n    const holdings = ref([]);\n    const currentPage = ref(1);\n    const itemsPerPage = 10; // Show 10 per page\n    const router = useRouter();\n    // Fetch ETF Holdings\n    const fetchHoldings = async () => {\n      try {\n        console.log(\"Fetching data from API...\");\n        const response = await axios.get(`http://localhost:3000/stocks/etf-holdings?symbol=${etfSymbol}`);\n        console.log(\"API Response:\", response.data);\n\n        // Initialize holdings with API data and favorite status from localStorage\n        holdings.value = response.data.map(holding => ({\n          ...holding,\n          isFavorite: getFavoriteFromStorage(holding.symbol), // Check localStorage for favorites\n        }));\n        \n        currentPage.value = 1; // Reset to first page\n      } catch (error) {\n        console.error(\"Error fetching holdings:\", error);\n      }\n    };\n\n    // Fetch data automatically when component loads\n    onMounted(fetchHoldings);\n\n    // Pagination Computed Properties\n    const totalPages = computed(() => Math.ceil(holdings.value.length / itemsPerPage));\n    console.log(totalPages.value);\n    const paginatedHoldings = computed(() => {\n      // First, sort the holdings by isFavorite (favorites first)\n      const sortedHoldings = [...holdings.value].sort((a, b) => b.isFavorite - a.isFavorite);\n\n      // Then, apply pagination to the sorted holdings\n      const start = (currentPage.value - 1) * itemsPerPage;\n      return sortedHoldings.slice(start, start + itemsPerPage);\n    });\n\n    // Pagination Methods\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++;\n      }\n    };\n\n    const prevPage = () => {\n      if (currentPage.value > 1) {\n        currentPage.value--;\n      }\n    };\n\n    // View Stock Details (Route to Another Page)\n    const viewStockDetails = (symbol) => {\n      router.push(`/stock/${symbol}`);\n    };\n    const getChangeClass = (weight) => {\n      return parseFloat(weight) >= 0.05 ? \"text-success\" : \"text-danger\";\n    };\n    const getFavoriteFromStorage = (symbol) => {\n      const favorites = JSON.parse(localStorage.getItem('favorites')) || [];\n      return favorites.includes(symbol);\n    };\n\n    // Update localStorage with current favorites\n    const updateFavoritesInStorage = () => {\n      const favorites = holdings.value.filter(stock => stock.isFavorite).map(stock => stock.symbol);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n    };\n    const favoriteStocks = computed(() => {\n      return holdings.value.filter(stock => stock.isFavorite);\n    });\n    const toggleFavorite = (symbol) => {\n      const holding = holdings.value.find(stock => stock.symbol === symbol);\n      if (holding) {\n        holding.isFavorite = !holding.isFavorite; // Toggle the favorite status\n        updateFavoritesInStorage(); // Update localStorage\n      }\n    };\n    return {\n      holdings,\n      paginatedHoldings,\n      currentPage,\n      totalPages,\n      nextPage,\n      prevPage,\n      viewStockDetails,\n      getChangeClass,\n      toggleFavorite,\n      favoriteStocks,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.table {\n  background-color: var(--table-bg) !important;\n  color: var( --text-color) !important;\n  transition: background-color 0.3s, color 0.3s;\n}\n\n.table th {\n  background-color: var(--table-header-bg);\n  padding: 10px;\n  text-align: left;\n  --text-color: var(--text-color);\n}\n\n.table td {\n  padding: 10px;\n  border-bottom: 1px solid var(--table-border);\n  background-color: var(--table-header-bg);\n  --text-color: var(--btn-text);\n}\n.btn-primary {\n  background-color: var(--btn-bg);\n  color: var(--btn-text);\n}\n\n.pagination {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}