{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.chartData ? (_openBlock(), _createBlock(_component_Bar, {\n    key: 0,\n    data: $setup.chartData,\n    options: $setup.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","$setup","chartData","_createBlock","_component_Bar","key","data","options","chartOptions","_createCommentVNode"],"sources":["/Users/attiqrehman/Documents/StockInfoSystem_FrontEnd/frontend/src/components/StockIntradayChart.vue"],"sourcesContent":["<template>\n    <div class=\"chart-container\">\n      <Bar v-if=\"chartData\" :data=\"chartData\" :options=\"chartOptions\" />\n    </div>\n  </template>\n  \n  <script>\n  import { ref, onMounted, watch } from \"vue\";\n  import axios from \"axios\";\n  import { Bar } from \"vue-chartjs\";\n  import { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from \"chart.js\";\n  \n  ChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\n  \n  export default {\n    components: { Bar },\n    props: {\n      symbol: String, \n    },\n    setup(props) {\n      const chartData = ref(null);\n  \n      \n      async function fetchIntradayData() {\n      try {\n        const response = await axios.get(`http://localhost:3000/stocks/intraday?symbol=${props.symbol}&interval=60min`);\n        \n        // Format the data for the chart\n        const formattedData = {\n          labels: response.data.map(item => item.timestamp), // X-axis labels (timestamps)\n          datasets: [\n            {\n              label: \"Stock Close (60min Interval)\", // Bar chart for Close\n              data: response.data.map(item => parseFloat(item.close)), // Close price\n              backgroundColor: \"rgba(0,123,255,0.6)\", // Bar color\n              yAxisID: 'y1', // Assign this to the left y-axis (Bar chart)\n            },\n            {\n              label: \"Stock High (60min Interval)\", // Line chart for High\n              data: response.data.map(item => parseFloat(item.high)), // High price\n              borderColor: \"rgba(255,99,132,1)\", // Line color\n              backgroundColor: \"rgba(255,99,132,0.2)\", // Line chart background color (transparent)\n              fill: true,\n              yAxisID: 'y2', // Assign this to the right y-axis (Line chart)\n            },\n          ],\n        };\n\n        chartData.value = formattedData;\n      } catch (error) {\n        console.error(\"Error fetching intraday data:\", error);\n      }\n    }\n  \n   \n      watch(() => props.symbol, (newSymbol) => {\n        fetchIntradayData();\n      });\n  \n   \n      onMounted(fetchIntradayData);\n  \n          return {\n      chartData,\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: true,\n        scales: {\n          y1: {\n            type: 'linear',\n            position: 'left', // This is the y-axis for the bar chart (close)\n          },\n          y2: {\n            type: 'linear',\n            position: 'right', // This is the y-axis for the line chart (high)\n            grid: {\n              drawOnChartArea: false, // Don't draw grid lines for the line chart y-axis\n            },\n          },\n        },\n      },\n    };\n  },\n};\n</script>\n  \n  <style scoped>\n  .chart-container {\n    width: 100%;\n    max-width: 1000px;\n    margin: auto;\n  }\n  </style>\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAiB;;;uBAA5BC,mBAAA,CAEM,OAFNC,UAEM,GADOC,MAAA,CAAAC,SAAS,I,cAApBC,YAAA,CAAkEC,cAAA;IAFxEC,GAAA;IAE6BC,IAAI,EAAEL,MAAA,CAAAC,SAAS;IAAGK,OAAO,EAAEN,MAAA,CAAAO;kDAFxDC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}